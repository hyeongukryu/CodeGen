"use strict";var e=require("fs"),t=require("fs/promises"),n=require("path");const r=process.argv[2]?.replace(/\/$/,"");r||(console.error("Usage: node update-api.js <server-root>"),console.error("Environment variables:"),console.error("    CODEGEN_CLI_WATCH"),console.error('        Set to "Y" to enable watch mode (default: off)'),console.error("    CODEGEN_CLI_WATCH_INTERVAL"),console.error("        Interval in milliseconds for watch mode (default: 1000)"),process.exit(1));const o="Y"===process.env.CODEGEN_CLI_WATCH,a=process.env.CODEGEN_CLI_WATCH_INTERVAL?parseInt(process.env.CODEGEN_CLI_WATCH_INTERVAL):1e3;async function i(e,t){try{const n=new URLSearchParams;n.append("format","typescript-api"),n.append("swr",e?"true":"false"),n.append("split","true"),n.append("configFilePath",t);const o=await fetch(`${r}/code-gen-api?${n.toString()}`);return await o.json()}catch{}return null}function s(e){if(null===e)throw new Error("Failed to get code");if(e.startsWith("ERROR\nERROR_BEGIN\n")){const t=e.indexOf("\nERROR_END\n"),n=e.substring(18,t);throw new Error(n)}}function c(e){const t=e.split("\n");let n=null,r="";const o=[];function a(){null!==n&&(o.push({fileName:n,content:r}),n=null,r="")}for(const e of t)if(e.startsWith("// __CODEGEN_VERSION_2_FILE_BOUNDARY__ ")){const t=e.split(" ")[2];i=t,a(),n=i}else{if(null===n)throw new Error("Unexpected line outside of file boundary");r+=e+"\n"}var i;return a(),o}async function l(r,o){await t.mkdir(o,{recursive:!0});for(const a of r){const r=n.join(o,a.fileName),i=await(async()=>{if(!e.existsSync(r))return{code:"create",message:"Created"};return await t.readFile(r,"utf-8")!==a.content?{code:"update",message:"Updated"}:{code:"none",message:null}})();"none"!==i.code&&(await t.writeFile(r,a.content),d(`${i.message}: ${r}`))}}async function u(e,r){if(!o)return await t.rm(e,{recursive:!0,force:!1}),void d(`Removed: ${e}`);const a=await t.opendir(e);for await(const o of a){if(!o.isFile())throw new Error(`Unexpected directory entry: ${o.name}`);if(!r.includes(o.name)){const r=n.join(e,o.name);await t.rm(r),d(`Removed: ${r}`)}}}function d(e){console.log(`[${function(){const e=new Date;return`${e.getFullYear().toString().padStart(4,"0")}-${(e.getMonth()+1).toString().padStart(2,"0")}-${e.getDate().toString().padStart(2,"0")} ${e.getHours().toString().padStart(2,"0")}:${e.getMinutes().toString().padStart(2,"0")}:${e.getSeconds().toString().padStart(2,"0")}`}()}] ${e}`)}!async function(){const t="src/api/client",n="src/api/server";e.existsSync(t)&&e.existsSync(n)||(console.error("src/api/client and src/api/server must exist"),process.exit(1));let r=null,f=null;for(;;)try{const e=await i(!0,"../client.config"),a=await i(!1,"../server.config");if(o&&(null===e||null===a)){d("Failed to get code");continue}if(s(e),s(a),r!==e||f!==a){d("Updating API code");const o=c(e),i=c(a);await u("src/api/client",o.map((e=>e.fileName))),await u("src/api/server",i.map((e=>e.fileName))),await l(o,t),await l(i,n),r=e,f=a,d("Updated API code")}if(!o)break}catch(e){console.error(e),o||process.exit(1)}finally{o&&await new Promise((e=>setTimeout(e,a)))}}();
